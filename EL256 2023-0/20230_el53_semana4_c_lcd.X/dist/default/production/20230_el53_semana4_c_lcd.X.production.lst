

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Feb 07 14:52:18 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.35
    31                           ; Generated 05/05/2021 GMT
    32                           ; 
    33                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F45K50 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _LATD	set	3980
    67  0000                     _ANSELAbits	set	3931
    68  0000                     _PORTD	set	3971
    69  0000                     _LATDbits	set	3980
    70  0000                     _TRISAbits	set	3986
    71  0000                     _TRISD	set	3989
    72  0000                     _ADCON2	set	4032
    73  0000                     _OSCCON	set	4051
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADCON0	set	4034
    76  0000                     _ADCON1	set	4033
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	callstack 0
    81  000800  00                 	db	0
    82  000801                     STR_2:
    83  000801  55                 	db	85	;'U'
    84  000802  50                 	db	80	;'P'
    85  000803  43                 	db	67	;'C'
    86  000804  20                 	db	32
    87  000805  56                 	db	86	;'V'
    88  000806  65                 	db	101	;'e'
    89  000807  72                 	db	114	;'r'
    90  000808  61                 	db	97	;'a'
    91  000809  6E                 	db	110	;'n'
    92  00080A  6F                 	db	111	;'o'
    93  00080B  20                 	db	32
    94  00080C  32                 	db	50	;'2'
    95  00080D  30                 	db	48	;'0'
    96  00080E  32                 	db	50	;'2'
    97  00080F  33                 	db	51	;'3'
    98  000810  00                 	db	0
    99  000811                     STR_1:
   100  000811  48                 	db	72	;'H'
   101  000812  6F                 	db	111	;'o'
   102  000813  6C                 	db	108	;'l'
   103  000814  61                 	db	97	;'a'
   104  000815  20                 	db	32
   105  000816  6D                 	db	109	;'m'
   106  000817  75                 	db	117	;'u'
   107  000818  6E                 	db	110	;'n'
   108  000819  64                 	db	100	;'d'
   109  00081A  6F                 	db	111	;'o'
   110  00081B  00                 	db	0
   111  00081C                     STR_3:
   112  00081C  43                 	db	67	;'C'
   113  00081D  61                 	db	97	;'a'
   114  00081E  6E                 	db	110	;'n'
   115  00081F  61                 	db	97	;'a'
   116  000820  6C                 	db	108	;'l'
   117  000821  20                 	db	32
   118  000822  30                 	db	48	;'0'
   119  000823  3A                 	db	58	;':'
   120  000824  00                 	db	0
   121  000825                     STR_4:
   122  000825  43                 	db	67	;'C'
   123  000826  61                 	db	97	;'a'
   124  000827  6E                 	db	110	;'n'
   125  000828  61                 	db	97	;'a'
   126  000829  6C                 	db	108	;'l'
   127  00082A  20                 	db	32
   128  00082B  31                 	db	49	;'1'
   129  00082C  3A                 	db	58	;':'
   130  00082D  00                 	db	0
   131  00082E  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           ; #config settings
   134                           
   135                           	psect	cinit
   136  000D3C                     __pcinit:
   137                           	callstack 0
   138  000D3C                     start_initialization:
   139                           	callstack 0
   140  000D3C                     __initialization:
   141                           	callstack 0
   142                           
   143                           ; Clear objects allocated to COMRAM (3 bytes)
   144  000D3C  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   145  000D3E  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   146  000D40  6A12               	clrf	__pbssCOMRAM& (0+255),c
   147  000D42                     end_of_initialization:
   148                           	callstack 0
   149  000D42                     __end_of__initialization:
   150                           	callstack 0
   151  000D42  0E00               	movlw	low (__Lsmallconst shr (0+16))
   152  000D44  6EF8               	movwf	tblptru,c
   153  000D46  0E08               	movlw	high __Lsmallconst
   154  000D48  6EF7               	movwf	tblptrh,c
   155  000D4A  0100               	movlb	0
   156  000D4C  EF18  F004         	goto	_main	;jump to C main() function
   157                           
   158                           	psect	bssCOMRAM
   159  000012                     __pbssCOMRAM:
   160                           	callstack 0
   161  000012                     _unidades:
   162                           	callstack 0
   163  000012                     	ds	1
   164  000013                     _decenas:
   165                           	callstack 0
   166  000013                     	ds	1
   167  000014                     _centenas:
   168                           	callstack 0
   169  000014                     	ds	1
   170                           
   171                           	psect	cstackCOMRAM
   172  000001                     __pcstackCOMRAM:
   173                           	callstack 0
   174  000001                     ?___awmod:
   175                           	callstack 0
   176  000001                     ENVIA_NIBBLE@dato:
   177                           	callstack 0
   178  000001                     LEER_LCD@aux:
   179                           	callstack 0
   180  000001                     ___awmod@dividend:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x0
   184  000001                     	ds	1
   185  000002                     ENVIA_CHAR@dato:
   186                           	callstack 0
   187  000002                     ENVIA_LCD_CMD@dato:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x1
   191  000002                     	ds	1
   192  000003                     ENVIA_CHAR@aux:
   193                           	callstack 0
   194  000003                     ENVIA_LCD_CMD@aux:
   195                           	callstack 0
   196  000003                     ___awmod@divisor:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x2
   200  000003                     	ds	1
   201  000004                     ??_LCD_CONFIG:
   202  000004                     POS_CURSOR@columna:
   203                           	callstack 0
   204  000004                     CURSOR_ONOFF@estado:
   205                           	callstack 0
   206  000004                     ESCRIBE_MENSAJE@cadena:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x3
   210  000004                     	ds	1
   211  000005                     ??_LCD_Init:
   212  000005                     POS_CURSOR@fila:
   213                           	callstack 0
   214  000005                     ___awmod@counter:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x4
   218  000005                     	ds	1
   219  000006                     ESCRIBE_MENSAJE@tam:
   220                           	callstack 0
   221  000006                     ___awmod@sign:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0x5
   225  000006                     	ds	1
   226  000007                     ??_ESCRIBE_MENSAJE:
   227  000007                     ?___awdiv:
   228                           	callstack 0
   229  000007                     ___awdiv@dividend:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x6
   233  000007                     	ds	2
   234  000009                     ESCRIBE_MENSAJE@i:
   235                           	callstack 0
   236  000009                     ___awdiv@divisor:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x8
   240  000009                     	ds	2
   241  00000B                     ___awdiv@counter:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0xA
   245  00000B                     	ds	1
   246  00000C                     ___awdiv@sign:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0xB
   250  00000C                     	ds	1
   251  00000D                     ___awdiv@quotient:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0xC
   255  00000D                     	ds	2
   256  00000F                     convierte@numero:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0xE
   260  00000F                     	ds	1
   261  000010                     ??_main:
   262                           
   263                           ; 1 bytes @ 0xF
   264  000010                     	ds	2
   265                           
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 38 in file "maincode2.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;		None
   276 ;; Return value:  Size  Location     Type
   277 ;;                  1    wreg      void 
   278 ;; Registers used:
   279 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   280 ;; Tracked objects:
   281 ;;		On entry : 0/0
   282 ;;		On exit  : 0/0
   283 ;;		Unchanged: 0/0
   284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   285 ;;      Params:         0       0       0       0       0       0       0       0       0
   286 ;;      Locals:         0       0       0       0       0       0       0       0       0
   287 ;;      Temps:          2       0       0       0       0       0       0       0       0
   288 ;;      Totals:         2       0       0       0       0       0       0       0       0
   289 ;;Total ram usage:        2 bytes
   290 ;; Hardware stack levels required when called: 4
   291 ;; This function calls:
   292 ;;		_BORRAR_LCD
   293 ;;		_ENVIA_CHAR
   294 ;;		_ESCRIBE_MENSAJE
   295 ;;		_LCD_Init
   296 ;;		_POS_CURSOR
   297 ;;		_configuro
   298 ;;		_convierte
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text0
   305  000830                     __ptext0:
   306                           	callstack 0
   307  000830                     _main:
   308                           	callstack 27
   309  000830                     
   310                           ;maincode2.c: 39:     configuro();
   311  000830  EC80  F006         	call	_configuro	;wreg free
   312  000834                     
   313                           ;maincode2.c: 40:     LCD_Init();
   314  000834  EC6C  F006         	call	_LCD_Init	;wreg free
   315  000838                     
   316                           ;maincode2.c: 41:     POS_CURSOR(1,0);
   317  000838  0E00               	movlw	0
   318  00083A  6E04               	movwf	POS_CURSOR@columna^0,c
   319  00083C  0E01               	movlw	1
   320  00083E  EC03  F006         	call	_POS_CURSOR
   321  000842                     
   322                           ;maincode2.c: 42:     ESCRIBE_MENSAJE("Hola mundo",10);
   323  000842  0E11               	movlw	low STR_1
   324  000844  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   325  000846  0E08               	movlw	high STR_1
   326  000848  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   327  00084A  0E0A               	movlw	10
   328  00084C  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   329  00084E  ECE4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   330  000852                     
   331                           ;maincode2.c: 43:     POS_CURSOR(2,0);
   332  000852  0E00               	movlw	0
   333  000854  6E04               	movwf	POS_CURSOR@columna^0,c
   334  000856  0E02               	movlw	2
   335  000858  EC03  F006         	call	_POS_CURSOR
   336  00085C                     
   337                           ;maincode2.c: 44:     ESCRIBE_MENSAJE("UPC Verano 2023",15);
   338  00085C  0E01               	movlw	low STR_2
   339  00085E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   340  000860  0E08               	movlw	high STR_2
   341  000862  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   342  000864  0E0F               	movlw	15
   343  000866  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   344  000868  ECE4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   345  00086C                     
   346                           ;maincode2.c: 45:     _delay((unsigned long)((2000)*(4000000UL/4000.0)));
   347  00086C  0E0B               	movlw	11
   348  00086E  6E11               	movwf	(??_main+1)^0,c
   349  000870  0E26               	movlw	38
   350  000872  6E10               	movwf	??_main^0,c
   351  000874  0E5E               	movlw	94
   352  000876                     u437:
   353  000876  2EE8               	decfsz	wreg,f,c
   354  000878  D7FE               	bra	u437
   355  00087A  2E10               	decfsz	??_main^0,f,c
   356  00087C  D7FC               	bra	u437
   357  00087E  2E11               	decfsz	(??_main+1)^0,f,c
   358  000880  D7FA               	bra	u437
   359  000882                     
   360                           ;maincode2.c: 46:     BORRAR_LCD();
   361  000882  ECAC  F006         	call	_BORRAR_LCD	;wreg free
   362  000886                     l1253:
   363                           
   364                           ;maincode2.c: 48:         ADCON0 = 0x01;
   365  000886  0E01               	movlw	1
   366  000888  6EC2               	movwf	194,c	;volatile
   367  00088A                     
   368                           ;maincode2.c: 49:         ADCON0bits.GO_DONE = 1;
   369  00088A  82C2               	bsf	194,1,c	;volatile
   370  00088C                     l129:
   371  00088C  B2C2               	btfsc	194,1,c	;volatile
   372  00088E  EF4B  F004         	goto	u411
   373  000892  EF4D  F004         	goto	u410
   374  000896                     u411:
   375  000896  EF46  F004         	goto	l129
   376  00089A                     u410:
   377  00089A                     
   378                           ;maincode2.c: 51:         convierte((ADRESH>>1));
   379  00089A  90D8               	bcf	status,0,c
   380  00089C  30C4               	rrcf	196,w,c	;volatile
   381  00089E  ECB7  F005         	call	_convierte
   382                           
   383                           ;maincode2.c: 52:         POS_CURSOR(1,0);
   384  0008A2  0E00               	movlw	0
   385  0008A4  6E04               	movwf	POS_CURSOR@columna^0,c
   386  0008A6  0E01               	movlw	1
   387  0008A8  EC03  F006         	call	_POS_CURSOR
   388  0008AC                     
   389                           ;maincode2.c: 53:         ESCRIBE_MENSAJE("Canal 0:",8);
   390  0008AC  0E1C               	movlw	low STR_3
   391  0008AE  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   392  0008B0  0E08               	movlw	high STR_3
   393  0008B2  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   394  0008B4  0E08               	movlw	8
   395  0008B6  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   396  0008B8  ECE4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   397  0008BC                     
   398                           ;maincode2.c: 54:         ENVIA_CHAR(centenas+0x30);
   399  0008BC  5014               	movf	_centenas^0,w,c
   400  0008BE  0F30               	addlw	48
   401  0008C0  EC3A  F006         	call	_ENVIA_CHAR
   402  0008C4                     
   403                           ;maincode2.c: 55:         ENVIA_CHAR(decenas+0x30);
   404  0008C4  5013               	movf	_decenas^0,w,c
   405  0008C6  0F30               	addlw	48
   406  0008C8  EC3A  F006         	call	_ENVIA_CHAR
   407  0008CC                     
   408                           ;maincode2.c: 56:         ENVIA_CHAR(unidades+0x30);
   409  0008CC  5012               	movf	_unidades^0,w,c
   410  0008CE  0F30               	addlw	48
   411  0008D0  EC3A  F006         	call	_ENVIA_CHAR
   412  0008D4                     
   413                           ;maincode2.c: 57:         ADCON0 = 0x05;
   414  0008D4  0E05               	movlw	5
   415  0008D6  6EC2               	movwf	194,c	;volatile
   416  0008D8                     
   417                           ;maincode2.c: 58:         ADCON0bits.GO_DONE = 1;
   418  0008D8  82C2               	bsf	194,1,c	;volatile
   419  0008DA                     l132:
   420  0008DA  B2C2               	btfsc	194,1,c	;volatile
   421  0008DC  EF72  F004         	goto	u421
   422  0008E0  EF74  F004         	goto	u420
   423  0008E4                     u421:
   424  0008E4  EF6D  F004         	goto	l132
   425  0008E8                     u420:
   426  0008E8                     
   427                           ;maincode2.c: 60:         convierte(ADRESH);
   428  0008E8  50C4               	movf	196,w,c	;volatile
   429  0008EA  ECB7  F005         	call	_convierte
   430                           
   431                           ;maincode2.c: 61:         POS_CURSOR(2,0);
   432  0008EE  0E00               	movlw	0
   433  0008F0  6E04               	movwf	POS_CURSOR@columna^0,c
   434  0008F2  0E02               	movlw	2
   435  0008F4  EC03  F006         	call	_POS_CURSOR
   436  0008F8                     
   437                           ;maincode2.c: 62:         ESCRIBE_MENSAJE("Canal 1:",8);
   438  0008F8  0E25               	movlw	low STR_4
   439  0008FA  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   440  0008FC  0E08               	movlw	high STR_4
   441  0008FE  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   442  000900  0E08               	movlw	8
   443  000902  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   444  000904  ECE4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   445  000908                     
   446                           ;maincode2.c: 63:         ENVIA_CHAR(centenas+0x30);
   447  000908  5014               	movf	_centenas^0,w,c
   448  00090A  0F30               	addlw	48
   449  00090C  EC3A  F006         	call	_ENVIA_CHAR
   450  000910                     
   451                           ;maincode2.c: 64:         ENVIA_CHAR(decenas+0x30);
   452  000910  5013               	movf	_decenas^0,w,c
   453  000912  0F30               	addlw	48
   454  000914  EC3A  F006         	call	_ENVIA_CHAR
   455  000918                     
   456                           ;maincode2.c: 65:         ENVIA_CHAR(unidades+0x30);
   457  000918  5012               	movf	_unidades^0,w,c
   458  00091A  0F30               	addlw	48
   459  00091C  EC3A  F006         	call	_ENVIA_CHAR
   460  000920  EF43  F004         	goto	l1253
   461  000924  EF00  F000         	goto	start
   462  000928                     __end_of_main:
   463                           	callstack 0
   464                           
   465 ;; *************** function _convierte *****************
   466 ;; Defined at:
   467 ;;		line 32 in file "maincode2.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  numero          1    wreg     unsigned char 
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  numero          1   14[COMRAM] unsigned char 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  2  122[None  ] int 
   474 ;; Registers used:
   475 ;;		wreg, status,2, status,0, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   481 ;;      Params:         0       0       0       0       0       0       0       0       0
   482 ;;      Locals:         1       0       0       0       0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0       0       0
   484 ;;      Totals:         1       0       0       0       0       0       0       0       0
   485 ;;Total ram usage:        1 bytes
   486 ;; Hardware stack levels used: 1
   487 ;; Hardware stack levels required when called: 1
   488 ;; This function calls:
   489 ;;		___awdiv
   490 ;;		___awmod
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text1
   497  000B6E                     __ptext1:
   498                           	callstack 0
   499  000B6E                     _convierte:
   500                           	callstack 29
   501                           
   502                           ;incstack = 0
   503                           ;convierte@numero stored from wreg
   504  000B6E  6E0F               	movwf	convierte@numero^0,c
   505  000B70                     
   506                           ;maincode2.c: 33:     centenas = numero / 100;
   507  000B70  C00F  F007         	movff	convierte@numero,___awdiv@dividend
   508  000B74  6A08               	clrf	(___awdiv@dividend+1)^0,c
   509  000B76  0E00               	movlw	0
   510  000B78  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   511  000B7A  0E64               	movlw	100
   512  000B7C  6E09               	movwf	___awdiv@divisor^0,c
   513  000B7E  EC94  F004         	call	___awdiv	;wreg free
   514  000B82  5007               	movf	?___awdiv^0,w,c
   515  000B84  6E14               	movwf	_centenas^0,c
   516                           
   517                           ;maincode2.c: 34:     decenas = (numero % 100) / 10;
   518  000B86  0E00               	movlw	0
   519  000B88  6E04               	movwf	(___awmod@divisor+1)^0,c
   520  000B8A  0E64               	movlw	100
   521  000B8C  6E03               	movwf	___awmod@divisor^0,c
   522  000B8E  C00F  F001         	movff	convierte@numero,___awmod@dividend
   523  000B92  6A02               	clrf	(___awmod@dividend+1)^0,c
   524  000B94  ECF6  F004         	call	___awmod	;wreg free
   525  000B98  C001  F007         	movff	?___awmod,___awdiv@dividend
   526  000B9C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
   527  000BA0  0E00               	movlw	0
   528  000BA2  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   529  000BA4  0E0A               	movlw	10
   530  000BA6  6E09               	movwf	___awdiv@divisor^0,c
   531  000BA8  EC94  F004         	call	___awdiv	;wreg free
   532  000BAC  5007               	movf	?___awdiv^0,w,c
   533  000BAE  6E13               	movwf	_decenas^0,c
   534                           
   535                           ;maincode2.c: 35:     unidades = numero % 10;
   536  000BB0  C00F  F001         	movff	convierte@numero,___awmod@dividend
   537  000BB4  6A02               	clrf	(___awmod@dividend+1)^0,c
   538  000BB6  0E00               	movlw	0
   539  000BB8  6E04               	movwf	(___awmod@divisor+1)^0,c
   540  000BBA  0E0A               	movlw	10
   541  000BBC  6E03               	movwf	___awmod@divisor^0,c
   542  000BBE  ECF6  F004         	call	___awmod	;wreg free
   543  000BC2  5001               	movf	?___awmod^0,w,c
   544  000BC4  6E12               	movwf	_unidades^0,c
   545  000BC6  0012               	return		;funcret
   546  000BC8                     __end_of_convierte:
   547                           	callstack 0
   548                           
   549 ;; *************** function ___awmod *****************
   550 ;; Defined at:
   551 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;  dividend        2    0[COMRAM] int 
   554 ;;  divisor         2    2[COMRAM] int 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;  sign            1    5[COMRAM] unsigned char 
   557 ;;  counter         1    4[COMRAM] unsigned char 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  2    0[COMRAM] int 
   560 ;; Registers used:
   561 ;;		wreg, status,2, status,0
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   567 ;;      Params:         4       0       0       0       0       0       0       0       0
   568 ;;      Locals:         2       0       0       0       0       0       0       0       0
   569 ;;      Temps:          0       0       0       0       0       0       0       0       0
   570 ;;      Totals:         6       0       0       0       0       0       0       0       0
   571 ;;Total ram usage:        6 bytes
   572 ;; Hardware stack levels used: 1
   573 ;; This function calls:
   574 ;;		Nothing
   575 ;; This function is called by:
   576 ;;		_convierte
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text2
   581  0009EC                     __ptext2:
   582                           	callstack 0
   583  0009EC                     ___awmod:
   584                           	callstack 29
   585  0009EC  0E00               	movlw	0
   586  0009EE  6E06               	movwf	___awmod@sign^0,c
   587  0009F0  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   588  0009F2  EFFF  F004         	goto	u320
   589  0009F6  EFFD  F004         	goto	u321
   590  0009FA                     u321:
   591  0009FA  EF05  F005         	goto	l1191
   592  0009FE                     u320:
   593  0009FE  6C01               	negf	___awmod@dividend^0,c
   594  000A00  1E02               	comf	(___awmod@dividend+1)^0,f,c
   595  000A02  B0D8               	btfsc	status,0,c
   596  000A04  2A02               	incf	(___awmod@dividend+1)^0,f,c
   597  000A06  0E01               	movlw	1
   598  000A08  6E06               	movwf	___awmod@sign^0,c
   599  000A0A                     l1191:
   600  000A0A  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   601  000A0C  EF0C  F005         	goto	u330
   602  000A10  EF0A  F005         	goto	u331
   603  000A14                     u331:
   604  000A14  EF10  F005         	goto	l1195
   605  000A18                     u330:
   606  000A18  6C03               	negf	___awmod@divisor^0,c
   607  000A1A  1E04               	comf	(___awmod@divisor+1)^0,f,c
   608  000A1C  B0D8               	btfsc	status,0,c
   609  000A1E  2A04               	incf	(___awmod@divisor+1)^0,f,c
   610  000A20                     l1195:
   611  000A20  5003               	movf	___awmod@divisor^0,w,c
   612  000A22  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   613  000A24  B4D8               	btfsc	status,2,c
   614  000A26  EF17  F005         	goto	u341
   615  000A2A  EF19  F005         	goto	u340
   616  000A2E                     u341:
   617  000A2E  EF3D  F005         	goto	l1211
   618  000A32                     u340:
   619  000A32  0E01               	movlw	1
   620  000A34  6E05               	movwf	___awmod@counter^0,c
   621  000A36  EF21  F005         	goto	l1201
   622  000A3A                     l1199:
   623  000A3A  90D8               	bcf	status,0,c
   624  000A3C  3603               	rlcf	___awmod@divisor^0,f,c
   625  000A3E  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   626  000A40  2A05               	incf	___awmod@counter^0,f,c
   627  000A42                     l1201:
   628  000A42  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   629  000A44  EF26  F005         	goto	u351
   630  000A48  EF28  F005         	goto	u350
   631  000A4C                     u351:
   632  000A4C  EF1D  F005         	goto	l1199
   633  000A50                     u350:
   634  000A50                     l1203:
   635  000A50  5003               	movf	___awmod@divisor^0,w,c
   636  000A52  5C01               	subwf	___awmod@dividend^0,w,c
   637  000A54  5004               	movf	(___awmod@divisor+1)^0,w,c
   638  000A56  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   639  000A58  A0D8               	btfss	status,0,c
   640  000A5A  EF31  F005         	goto	u361
   641  000A5E  EF33  F005         	goto	u360
   642  000A62                     u361:
   643  000A62  EF37  F005         	goto	l1207
   644  000A66                     u360:
   645  000A66  5003               	movf	___awmod@divisor^0,w,c
   646  000A68  5E01               	subwf	___awmod@dividend^0,f,c
   647  000A6A  5004               	movf	(___awmod@divisor+1)^0,w,c
   648  000A6C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   649  000A6E                     l1207:
   650  000A6E  90D8               	bcf	status,0,c
   651  000A70  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   652  000A72  3203               	rrcf	___awmod@divisor^0,f,c
   653  000A74  2E05               	decfsz	___awmod@counter^0,f,c
   654  000A76  EF28  F005         	goto	l1203
   655  000A7A                     l1211:
   656  000A7A  5006               	movf	___awmod@sign^0,w,c
   657  000A7C  B4D8               	btfsc	status,2,c
   658  000A7E  EF43  F005         	goto	u371
   659  000A82  EF45  F005         	goto	u370
   660  000A86                     u371:
   661  000A86  EF49  F005         	goto	l1215
   662  000A8A                     u370:
   663  000A8A  6C01               	negf	___awmod@dividend^0,c
   664  000A8C  1E02               	comf	(___awmod@dividend+1)^0,f,c
   665  000A8E  B0D8               	btfsc	status,0,c
   666  000A90  2A02               	incf	(___awmod@dividend+1)^0,f,c
   667  000A92                     l1215:
   668  000A92  C001  F001         	movff	___awmod@dividend,?___awmod
   669  000A96  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   670  000A9A  0012               	return		;funcret
   671  000A9C                     __end_of___awmod:
   672                           	callstack 0
   673                           
   674 ;; *************** function ___awdiv *****************
   675 ;; Defined at:
   676 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  dividend        2    6[COMRAM] int 
   679 ;;  divisor         2    8[COMRAM] int 
   680 ;; Auto vars:     Size  Location     Type
   681 ;;  quotient        2   12[COMRAM] int 
   682 ;;  sign            1   11[COMRAM] unsigned char 
   683 ;;  counter         1   10[COMRAM] unsigned char 
   684 ;; Return value:  Size  Location     Type
   685 ;;                  2    6[COMRAM] int 
   686 ;; Registers used:
   687 ;;		wreg, status,2, status,0
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   693 ;;      Params:         4       0       0       0       0       0       0       0       0
   694 ;;      Locals:         4       0       0       0       0       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0       0       0       0       0
   696 ;;      Totals:         8       0       0       0       0       0       0       0       0
   697 ;;Total ram usage:        8 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; This function calls:
   700 ;;		Nothing
   701 ;; This function is called by:
   702 ;;		_convierte
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text3
   707  000928                     __ptext3:
   708                           	callstack 0
   709  000928                     ___awdiv:
   710                           	callstack 29
   711  000928  0E00               	movlw	0
   712  00092A  6E0C               	movwf	___awdiv@sign^0,c
   713  00092C  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
   714  00092E  EF9D  F004         	goto	u260
   715  000932  EF9B  F004         	goto	u261
   716  000936                     u261:
   717  000936  EFA3  F004         	goto	l1147
   718  00093A                     u260:
   719  00093A  6C09               	negf	___awdiv@divisor^0,c
   720  00093C  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
   721  00093E  B0D8               	btfsc	status,0,c
   722  000940  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
   723  000942  0E01               	movlw	1
   724  000944  6E0C               	movwf	___awdiv@sign^0,c
   725  000946                     l1147:
   726  000946  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
   727  000948  EFAA  F004         	goto	u270
   728  00094C  EFA8  F004         	goto	u271
   729  000950                     u271:
   730  000950  EFB0  F004         	goto	l1153
   731  000954                     u270:
   732  000954  6C07               	negf	___awdiv@dividend^0,c
   733  000956  1E08               	comf	(___awdiv@dividend+1)^0,f,c
   734  000958  B0D8               	btfsc	status,0,c
   735  00095A  2A08               	incf	(___awdiv@dividend+1)^0,f,c
   736  00095C  0E01               	movlw	1
   737  00095E  1A0C               	xorwf	___awdiv@sign^0,f,c
   738  000960                     l1153:
   739  000960  0E00               	movlw	0
   740  000962  6E0E               	movwf	(___awdiv@quotient+1)^0,c
   741  000964  0E00               	movlw	0
   742  000966  6E0D               	movwf	___awdiv@quotient^0,c
   743  000968  5009               	movf	___awdiv@divisor^0,w,c
   744  00096A  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
   745  00096C  B4D8               	btfsc	status,2,c
   746  00096E  EFBB  F004         	goto	u281
   747  000972  EFBD  F004         	goto	u280
   748  000976                     u281:
   749  000976  EFE5  F004         	goto	l1175
   750  00097A                     u280:
   751  00097A  0E01               	movlw	1
   752  00097C  6E0B               	movwf	___awdiv@counter^0,c
   753  00097E  EFC5  F004         	goto	l1161
   754  000982                     l1159:
   755  000982  90D8               	bcf	status,0,c
   756  000984  3609               	rlcf	___awdiv@divisor^0,f,c
   757  000986  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
   758  000988  2A0B               	incf	___awdiv@counter^0,f,c
   759  00098A                     l1161:
   760  00098A  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
   761  00098C  EFCA  F004         	goto	u291
   762  000990  EFCC  F004         	goto	u290
   763  000994                     u291:
   764  000994  EFC1  F004         	goto	l1159
   765  000998                     u290:
   766  000998                     l1163:
   767  000998  90D8               	bcf	status,0,c
   768  00099A  360D               	rlcf	___awdiv@quotient^0,f,c
   769  00099C  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
   770  00099E  5009               	movf	___awdiv@divisor^0,w,c
   771  0009A0  5C07               	subwf	___awdiv@dividend^0,w,c
   772  0009A2  500A               	movf	(___awdiv@divisor+1)^0,w,c
   773  0009A4  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
   774  0009A6  A0D8               	btfss	status,0,c
   775  0009A8  EFD8  F004         	goto	u301
   776  0009AC  EFDA  F004         	goto	u300
   777  0009B0                     u301:
   778  0009B0  EFDF  F004         	goto	l1171
   779  0009B4                     u300:
   780  0009B4  5009               	movf	___awdiv@divisor^0,w,c
   781  0009B6  5E07               	subwf	___awdiv@dividend^0,f,c
   782  0009B8  500A               	movf	(___awdiv@divisor+1)^0,w,c
   783  0009BA  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
   784  0009BC  800D               	bsf	___awdiv@quotient^0,0,c
   785  0009BE                     l1171:
   786  0009BE  90D8               	bcf	status,0,c
   787  0009C0  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
   788  0009C2  3209               	rrcf	___awdiv@divisor^0,f,c
   789  0009C4  2E0B               	decfsz	___awdiv@counter^0,f,c
   790  0009C6  EFCC  F004         	goto	l1163
   791  0009CA                     l1175:
   792  0009CA  500C               	movf	___awdiv@sign^0,w,c
   793  0009CC  B4D8               	btfsc	status,2,c
   794  0009CE  EFEB  F004         	goto	u311
   795  0009D2  EFED  F004         	goto	u310
   796  0009D6                     u311:
   797  0009D6  EFF1  F004         	goto	l1179
   798  0009DA                     u310:
   799  0009DA  6C0D               	negf	___awdiv@quotient^0,c
   800  0009DC  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
   801  0009DE  B0D8               	btfsc	status,0,c
   802  0009E0  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
   803  0009E2                     l1179:
   804  0009E2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
   805  0009E6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
   806  0009EA  0012               	return		;funcret
   807  0009EC                     __end_of___awdiv:
   808                           	callstack 0
   809                           
   810 ;; *************** function _configuro *****************
   811 ;; Defined at:
   812 ;;		line 9 in file "maincode2.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   826 ;;      Params:         0       0       0       0       0       0       0       0       0
   827 ;;      Locals:         0       0       0       0       0       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0       0       0       0       0
   829 ;;      Totals:         0       0       0       0       0       0       0       0       0
   830 ;;Total ram usage:        0 bytes
   831 ;; Hardware stack levels used: 1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text4
   840  000D00                     __ptext4:
   841                           	callstack 0
   842  000D00                     _configuro:
   843                           	callstack 30
   844  000D00                     
   845                           ;maincode2.c: 10:     OSCCON = 0x52;
   846  000D00  0E52               	movlw	82
   847  000D02  6ED3               	movwf	211,c	;volatile
   848  000D04                     
   849                           ;maincode2.c: 11:     TRISAbits.RA0 = 1;
   850  000D04  8092               	bsf	146,0,c	;volatile
   851  000D06                     
   852                           ;maincode2.c: 12:     ANSELAbits.ANSA0 = 1;
   853  000D06  010F               	movlb	15	; () banked
   854  000D08  815B               	bsf	91,0,b	;volatile
   855  000D0A                     
   856                           ; BSR set to: 15
   857                           ;maincode2.c: 13:     TRISAbits.RA1 = 1;
   858  000D0A  8292               	bsf	146,1,c	;volatile
   859  000D0C                     
   860                           ; BSR set to: 15
   861                           ;maincode2.c: 14:     ANSELAbits.ANSA1 = 1;
   862  000D0C  835B               	bsf	91,1,b	;volatile
   863  000D0E                     
   864                           ; BSR set to: 15
   865                           ;maincode2.c: 15:     TRISAbits.RA3 = 1;
   866  000D0E  8692               	bsf	146,3,c	;volatile
   867  000D10                     
   868                           ; BSR set to: 15
   869                           ;maincode2.c: 16:     ANSELAbits.ANSA3 = 1;
   870  000D10  875B               	bsf	91,3,b	;volatile
   871                           
   872                           ;maincode2.c: 18:     ADCON2 = 0x24;
   873  000D12  0E24               	movlw	36
   874  000D14  6EC0               	movwf	192,c	;volatile
   875                           
   876                           ;maincode2.c: 19:     ADCON1 = 0x04;
   877  000D16  0E04               	movlw	4
   878  000D18  6EC1               	movwf	193,c	;volatile
   879                           
   880                           ;maincode2.c: 20:     ADCON0 = 0x01;
   881  000D1A  0E01               	movlw	1
   882  000D1C  6EC2               	movwf	194,c	;volatile
   883  000D1E                     
   884                           ; BSR set to: 15
   885  000D1E  0012               	return		;funcret
   886  000D20                     __end_of_configuro:
   887                           	callstack 0
   888                           
   889 ;; *************** function _POS_CURSOR *****************
   890 ;; Defined at:
   891 ;;		line 6 in file "LCD.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  fila            1    wreg     unsigned char 
   894 ;;  columna         1    3[COMRAM] unsigned char 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  fila            1    4[COMRAM] unsigned char 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, status,2, status,0, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   906 ;;      Params:         1       0       0       0       0       0       0       0       0
   907 ;;      Locals:         1       0       0       0       0       0       0       0       0
   908 ;;      Temps:          0       0       0       0       0       0       0       0       0
   909 ;;      Totals:         2       0       0       0       0       0       0       0       0
   910 ;;Total ram usage:        2 bytes
   911 ;; Hardware stack levels used: 1
   912 ;; Hardware stack levels required when called: 2
   913 ;; This function calls:
   914 ;;		_ENVIA_LCD_CMD
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text5
   921  000C06                     __ptext5:
   922                           	callstack 0
   923  000C06                     _POS_CURSOR:
   924                           	callstack 28
   925                           
   926                           ; BSR set to: 15
   927                           ;incstack = 0
   928                           ;POS_CURSOR@fila stored from wreg
   929  000C06  6E05               	movwf	POS_CURSOR@fila^0,c
   930  000C08                     
   931                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   932  000C08  0405               	decf	POS_CURSOR@fila^0,w,c
   933  000C0A  A4D8               	btfss	status,2,c
   934  000C0C  EF0A  F006         	goto	u381
   935  000C10  EF0C  F006         	goto	u380
   936  000C14                     u381:
   937  000C14  EF12  F006         	goto	l1223
   938  000C18                     u380:
   939  000C18                     
   940                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   941  000C18  5004               	movf	POS_CURSOR@columna^0,w,c
   942  000C1A  0F80               	addlw	128
   943  000C1C  EC20  F006         	call	_ENVIA_LCD_CMD
   944                           
   945                           ;LCD.c: 11:  }
   946  000C20  EF1F  F006         	goto	l24
   947  000C24                     l1223:
   948  000C24  0E02               	movlw	2
   949  000C26  1805               	xorwf	POS_CURSOR@fila^0,w,c
   950  000C28  A4D8               	btfss	status,2,c
   951  000C2A  EF19  F006         	goto	u391
   952  000C2E  EF1B  F006         	goto	u390
   953  000C32                     u391:
   954  000C32  EF1F  F006         	goto	l24
   955  000C36                     u390:
   956  000C36                     
   957                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   958  000C36  5004               	movf	POS_CURSOR@columna^0,w,c
   959  000C38  0FC0               	addlw	192
   960  000C3A  EC20  F006         	call	_ENVIA_LCD_CMD
   961  000C3E                     l24:
   962  000C3E  0012               	return		;funcret
   963  000C40                     __end_of_POS_CURSOR:
   964                           	callstack 0
   965                           
   966 ;; *************** function _LCD_Init *****************
   967 ;; Defined at:
   968 ;;		line 23 in file "maincode2.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;		None
   971 ;; Auto vars:     Size  Location     Type
   972 ;;		None
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, status,2, status,0, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   982 ;;      Params:         0       0       0       0       0       0       0       0       0
   983 ;;      Locals:         0       0       0       0       0       0       0       0       0
   984 ;;      Temps:          1       0       0       0       0       0       0       0       0
   985 ;;      Totals:         1       0       0       0       0       0       0       0       0
   986 ;;Total ram usage:        1 bytes
   987 ;; Hardware stack levels used: 1
   988 ;; Hardware stack levels required when called: 3
   989 ;; This function calls:
   990 ;;		_BORRAR_LCD
   991 ;;		_CURSOR_HOME
   992 ;;		_CURSOR_ONOFF
   993 ;;		_LCD_CONFIG
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text6
  1000  000CD8                     __ptext6:
  1001                           	callstack 0
  1002  000CD8                     _LCD_Init:
  1003                           	callstack 27
  1004  000CD8                     
  1005                           ;maincode2.c: 24:     TRISD = 0x00;
  1006  000CD8  0E00               	movlw	0
  1007  000CDA  6E95               	movwf	149,c	;volatile
  1008  000CDC                     
  1009                           ;maincode2.c: 25:     _delay((unsigned long)((29)*(4000000UL/4000.0)));
  1010  000CDC  0E26               	movlw	38
  1011  000CDE  6E05               	movwf	??_LCD_Init^0,c
  1012  000CE0  0EA8               	movlw	168
  1013  000CE2                     u447:
  1014  000CE2  2EE8               	decfsz	wreg,f,c
  1015  000CE4  D7FE               	bra	u447
  1016  000CE6  2E05               	decfsz	??_LCD_Init^0,f,c
  1017  000CE8  D7FC               	bra	u447
  1018  000CEA  D000               	nop2	
  1019  000CEC                     
  1020                           ;maincode2.c: 26:     LCD_CONFIG();
  1021  000CEC  EC87  F005         	call	_LCD_CONFIG	;wreg free
  1022  000CF0                     
  1023                           ;maincode2.c: 27:     BORRAR_LCD();
  1024  000CF0  ECAC  F006         	call	_BORRAR_LCD	;wreg free
  1025  000CF4                     
  1026                           ;maincode2.c: 28:     CURSOR_HOME();
  1027  000CF4  ECA8  F006         	call	_CURSOR_HOME	;wreg free
  1028  000CF8                     
  1029                           ;maincode2.c: 29:     CURSOR_ONOFF(1);
  1030  000CF8  0E01               	movlw	1
  1031  000CFA  EC54  F006         	call	_CURSOR_ONOFF
  1032  000CFE  0012               	return		;funcret
  1033  000D00                     __end_of_LCD_Init:
  1034                           	callstack 0
  1035                           
  1036 ;; *************** function _LCD_CONFIG *****************
  1037 ;; Defined at:
  1038 ;;		line 72 in file "LCD.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1052 ;;      Params:         0       0       0       0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1054 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1055 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1056 ;;Total ram usage:        1 bytes
  1057 ;; Hardware stack levels used: 1
  1058 ;; Hardware stack levels required when called: 2
  1059 ;; This function calls:
  1060 ;;		_ENVIA_LCD_CMD
  1061 ;;		_ENVIA_NIBBLE
  1062 ;; This function is called by:
  1063 ;;		_LCD_Init
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text7
  1068  000B0E                     __ptext7:
  1069                           	callstack 0
  1070  000B0E                     _LCD_CONFIG:
  1071                           	callstack 27
  1072  000B0E                     
  1073                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
  1074  000B0E  908C               	bcf	140,0,c	;volatile
  1075                           
  1076                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
  1077  000B10  928C               	bcf	140,1,c	;volatile
  1078  000B12                     
  1079                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
  1080  000B12  0E30               	movlw	48
  1081  000B14  EC90  F006         	call	_ENVIA_NIBBLE
  1082  000B18                     
  1083                           ;LCD.c: 77:         _delay(24000);
  1084  000B18  0E20               	movlw	32
  1085  000B1A  6E04               	movwf	??_LCD_CONFIG^0,c
  1086  000B1C  0E2A               	movlw	42
  1087  000B1E                     u457:
  1088  000B1E  2EE8               	decfsz	wreg,f,c
  1089  000B20  D7FE               	bra	u457
  1090  000B22  2E04               	decfsz	??_LCD_CONFIG^0,f,c
  1091  000B24  D7FC               	bra	u457
  1092  000B26                     
  1093                           ;LCD.c: 78:         _delay(24000);
  1094  000B26  0E20               	movlw	32
  1095  000B28  6E04               	movwf	??_LCD_CONFIG^0,c
  1096  000B2A  0E2A               	movlw	42
  1097  000B2C                     u467:
  1098  000B2C  2EE8               	decfsz	wreg,f,c
  1099  000B2E  D7FE               	bra	u467
  1100  000B30  2E04               	decfsz	??_LCD_CONFIG^0,f,c
  1101  000B32  D7FC               	bra	u467
  1102                           
  1103                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
  1104  000B34  0E30               	movlw	48
  1105  000B36  EC90  F006         	call	_ENVIA_NIBBLE
  1106  000B3A                     
  1107                           ;LCD.c: 83:  _delay(1200);
  1108  000B3A  0EF0               	movlw	240
  1109  000B3C                     u477:
  1110  000B3C  D000               	nop2	
  1111  000B3E  2EE8               	decfsz	wreg,f,c
  1112  000B40  D7FD               	bra	u477
  1113  000B42                     
  1114                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
  1115  000B42  0E30               	movlw	48
  1116  000B44  EC90  F006         	call	_ENVIA_NIBBLE
  1117  000B48                     
  1118                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
  1119  000B48  0E20               	movlw	32
  1120  000B4A  EC90  F006         	call	_ENVIA_NIBBLE
  1121  000B4E                     
  1122                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
  1123  000B4E  0E01               	movlw	1
  1124  000B50  EC20  F006         	call	_ENVIA_LCD_CMD
  1125  000B54                     
  1126                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
  1127  000B54  0E28               	movlw	40
  1128  000B56  EC20  F006         	call	_ENVIA_LCD_CMD
  1129  000B5A                     
  1130                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1131  000B5A  0E0F               	movlw	15
  1132  000B5C  EC20  F006         	call	_ENVIA_LCD_CMD
  1133  000B60                     
  1134                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1135  000B60  0E06               	movlw	6
  1136  000B62  EC20  F006         	call	_ENVIA_LCD_CMD
  1137  000B66                     
  1138                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1139  000B66  0E01               	movlw	1
  1140  000B68  EC20  F006         	call	_ENVIA_LCD_CMD
  1141  000B6C  0012               	return		;funcret
  1142  000B6E                     __end_of_LCD_CONFIG:
  1143                           	callstack 0
  1144                           
  1145 ;; *************** function _CURSOR_ONOFF *****************
  1146 ;; Defined at:
  1147 ;;		line 35 in file "LCD.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  estado          1    wreg     unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  estado          1    3[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1161 ;;      Params:         0       0       0       0       0       0       0       0       0
  1162 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1164 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1165 ;;Total ram usage:        1 bytes
  1166 ;; Hardware stack levels used: 1
  1167 ;; Hardware stack levels required when called: 2
  1168 ;; This function calls:
  1169 ;;		_ENVIA_LCD_CMD
  1170 ;; This function is called by:
  1171 ;;		_LCD_Init
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text8
  1176  000CA8                     __ptext8:
  1177                           	callstack 0
  1178  000CA8                     _CURSOR_ONOFF:
  1179                           	callstack 27
  1180                           
  1181                           ;incstack = 0
  1182                           ;CURSOR_ONOFF@estado stored from wreg
  1183  000CA8  6E04               	movwf	CURSOR_ONOFF@estado^0,c
  1184  000CAA                     
  1185                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1186  000CAA  5004               	movf	CURSOR_ONOFF@estado^0,w,c
  1187  000CAC  A4D8               	btfss	status,2,c
  1188  000CAE  EF5B  F006         	goto	u21
  1189  000CB2  EF5D  F006         	goto	u20
  1190  000CB6                     u21:
  1191  000CB6  EF60  F006         	goto	l887
  1192  000CBA                     u20:
  1193  000CBA  0E0E               	movlw	14
  1194  000CBC  EC20  F006         	call	_ENVIA_LCD_CMD
  1195  000CC0                     l887:
  1196                           
  1197                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1198  000CC0  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1199  000CC2  A4D8               	btfss	status,2,c
  1200  000CC4  EF66  F006         	goto	u31
  1201  000CC8  EF68  F006         	goto	u30
  1202  000CCC                     u31:
  1203  000CCC  EF6B  F006         	goto	l42
  1204  000CD0                     u30:
  1205  000CD0  0E0C               	movlw	12
  1206  000CD2  EC20  F006         	call	_ENVIA_LCD_CMD
  1207  000CD6                     l42:
  1208  000CD6  0012               	return		;funcret
  1209  000CD8                     __end_of_CURSOR_ONOFF:
  1210                           	callstack 0
  1211                           
  1212 ;; *************** function _CURSOR_HOME *****************
  1213 ;; Defined at:
  1214 ;;		line 30 in file "LCD.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;		None
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1228 ;;      Params:         0       0       0       0       0       0       0       0       0
  1229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1231 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        0 bytes
  1233 ;; Hardware stack levels used: 1
  1234 ;; Hardware stack levels required when called: 2
  1235 ;; This function calls:
  1236 ;;		_ENVIA_LCD_CMD
  1237 ;; This function is called by:
  1238 ;;		_LCD_Init
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text9
  1243  000D50                     __ptext9:
  1244                           	callstack 0
  1245  000D50                     _CURSOR_HOME:
  1246                           	callstack 27
  1247  000D50                     
  1248                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1249  000D50  0E02               	movlw	2
  1250  000D52  EC20  F006         	call	_ENVIA_LCD_CMD
  1251  000D56  0012               	return		;funcret
  1252  000D58                     __end_of_CURSOR_HOME:
  1253                           	callstack 0
  1254                           
  1255 ;; *************** function _BORRAR_LCD *****************
  1256 ;; Defined at:
  1257 ;;		line 67 in file "LCD.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1271 ;;      Params:         0       0       0       0       0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1275 ;;Total ram usage:        0 bytes
  1276 ;; Hardware stack levels used: 1
  1277 ;; Hardware stack levels required when called: 2
  1278 ;; This function calls:
  1279 ;;		_ENVIA_LCD_CMD
  1280 ;; This function is called by:
  1281 ;;		_LCD_Init
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text10
  1287  000D58                     __ptext10:
  1288                           	callstack 0
  1289  000D58                     _BORRAR_LCD:
  1290                           	callstack 27
  1291  000D58                     
  1292                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1293  000D58  0E01               	movlw	1
  1294  000D5A  EC20  F006         	call	_ENVIA_LCD_CMD
  1295  000D5E  0012               	return		;funcret
  1296  000D60                     __end_of_BORRAR_LCD:
  1297                           	callstack 0
  1298                           
  1299 ;; *************** function _ENVIA_LCD_CMD *****************
  1300 ;; Defined at:
  1301 ;;		line 104 in file "LCD.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  dato            1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  dato            1    1[COMRAM] unsigned char 
  1306 ;;  aux             1    2[COMRAM] unsigned char 
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2, status,0, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1316 ;;      Params:         0       0       0       0       0       0       0       0       0
  1317 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1319 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1320 ;;Total ram usage:        2 bytes
  1321 ;; Hardware stack levels used: 1
  1322 ;; Hardware stack levels required when called: 1
  1323 ;; This function calls:
  1324 ;;		_ENVIA_NIBBLE
  1325 ;;		_LEER_LCD
  1326 ;; This function is called by:
  1327 ;;		_POS_CURSOR
  1328 ;;		_CURSOR_HOME
  1329 ;;		_CURSOR_ONOFF
  1330 ;;		_BORRAR_LCD
  1331 ;;		_LCD_CONFIG
  1332 ;;		_BLINK_CURSOR
  1333 ;;		_DISPLAY_ONOFF
  1334 ;;		_GENERACARACTER
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text11
  1339  000C40                     __ptext11:
  1340                           	callstack 0
  1341  000C40                     _ENVIA_LCD_CMD:
  1342                           	callstack 28
  1343                           
  1344                           ;incstack = 0
  1345                           ;ENVIA_LCD_CMD@dato stored from wreg
  1346  000C40  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1347  000C42                     
  1348                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1349  000C42  908C               	bcf	140,0,c	;volatile
  1350  000C44                     
  1351                           ;LCD.c: 108:  LEER_LCD();
  1352  000C44  EC4E  F005         	call	_LEER_LCD	;wreg free
  1353  000C48                     
  1354                           ;LCD.c: 109:  TRISD = 0b00000000;
  1355  000C48  0E00               	movlw	0
  1356  000C4A  6E95               	movwf	149,c	;volatile
  1357  000C4C                     
  1358                           ;LCD.c: 111:         _delay(1200);
  1359  000C4C  0EF0               	movlw	240
  1360  000C4E                     u487:
  1361  000C4E  D000               	nop2	
  1362  000C50  2EE8               	decfsz	wreg,f,c
  1363  000C52  D7FD               	bra	u487
  1364  000C54                     
  1365                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1366  000C54  928C               	bcf	140,1,c	;volatile
  1367  000C56                     
  1368                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1369  000C56  948C               	bcf	140,2,c	;volatile
  1370  000C58                     
  1371                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1372  000C58  908C               	bcf	140,0,c	;volatile
  1373  000C5A                     
  1374                           ;LCD.c: 115:  aux = dato & 0xF0;
  1375  000C5A  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1376  000C5C  0BF0               	andlw	240
  1377  000C5E  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1378  000C60                     
  1379                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1380  000C60  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1381  000C62  EC90  F006         	call	_ENVIA_NIBBLE
  1382  000C66                     
  1383                           ;LCD.c: 117:  aux = dato<<4;
  1384  000C66  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1385  000C68  0BF0               	andlw	240
  1386  000C6A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1387  000C6C                     
  1388                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1389  000C6C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1390  000C6E  EC90  F006         	call	_ENVIA_NIBBLE
  1391  000C72  0012               	return		;funcret
  1392  000C74                     __end_of_ENVIA_LCD_CMD:
  1393                           	callstack 0
  1394                           
  1395 ;; *************** function _ESCRIBE_MENSAJE *****************
  1396 ;; Defined at:
  1397 ;;		line 41 in file "LCD.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1400 ;;		 -> STR_4(9), STR_3(9), STR_2(16), STR_1(11), 
  1401 ;;  tam             1    5[COMRAM] unsigned char 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  i               1    8[COMRAM] unsigned char 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1413 ;;      Params:         3       0       0       0       0       0       0       0       0
  1414 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1415 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1416 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1417 ;;Total ram usage:        6 bytes
  1418 ;; Hardware stack levels used: 1
  1419 ;; Hardware stack levels required when called: 2
  1420 ;; This function calls:
  1421 ;;		_ENVIA_CHAR
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text12
  1428  000BC8                     __ptext12:
  1429                           	callstack 0
  1430  000BC8                     _ESCRIBE_MENSAJE:
  1431                           	callstack 28
  1432  000BC8                     
  1433                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1434  000BC8  0E00               	movlw	0
  1435  000BCA  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1436                           
  1437                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1438  000BCC  0E00               	movlw	0
  1439  000BCE  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1440  000BD0  EFF9  F005         	goto	l1233
  1441  000BD4                     l1229:
  1442                           
  1443                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1444  000BD4  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1445  000BD6  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1446  000BD8  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1447  000BDA  0E00               	movlw	0
  1448  000BDC  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1449  000BDE  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1450  000BE0  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1451  000BE4  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1452  000BE8                     	if	0	;tblptru may be non-zero
  1453  000BE8                     	endif
  1454  000BE8                     	if	0	;tblptru may be non-zero
  1455  000BE8                     	endif
  1456  000BE8  0008               	tblrd		*
  1457  000BEA  50F5               	movf	tablat,w,c
  1458  000BEC  EC3A  F006         	call	_ENVIA_CHAR
  1459  000BF0                     
  1460                           ;LCD.c: 47:  }
  1461  000BF0  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1462  000BF2                     l1233:
  1463  000BF2  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1464  000BF4  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1465  000BF6  A0D8               	btfss	status,0,c
  1466  000BF8  EF00  F006         	goto	u401
  1467  000BFC  EF02  F006         	goto	u400
  1468  000C00                     u401:
  1469  000C00  EFEA  F005         	goto	l1229
  1470  000C04                     u400:
  1471  000C04  0012               	return		;funcret
  1472  000C06                     __end_of_ESCRIBE_MENSAJE:
  1473                           	callstack 0
  1474                           
  1475 ;; *************** function _ENVIA_CHAR *****************
  1476 ;; Defined at:
  1477 ;;		line 50 in file "LCD.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  dato            1    wreg     unsigned char 
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  dato            1    1[COMRAM] unsigned char 
  1482 ;;  aux             1    2[COMRAM] unsigned char 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, status,2, status,0, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1492 ;;      Params:         0       0       0       0       0       0       0       0       0
  1493 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1495 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1496 ;;Total ram usage:        2 bytes
  1497 ;; Hardware stack levels used: 1
  1498 ;; Hardware stack levels required when called: 1
  1499 ;; This function calls:
  1500 ;;		_ENVIA_NIBBLE
  1501 ;;		_LEER_LCD
  1502 ;; This function is called by:
  1503 ;;		_ESCRIBE_MENSAJE
  1504 ;;		_main
  1505 ;;		_GENERACARACTER
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text13
  1510  000C74                     __ptext13:
  1511                           	callstack 0
  1512  000C74                     _ENVIA_CHAR:
  1513                           	callstack 28
  1514                           
  1515                           ;incstack = 0
  1516                           ;ENVIA_CHAR@dato stored from wreg
  1517  000C74  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1518  000C76                     
  1519                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1520  000C76  808C               	bsf	140,0,c	;volatile
  1521  000C78                     
  1522                           ;LCD.c: 54:  LEER_LCD();
  1523  000C78  EC4E  F005         	call	_LEER_LCD	;wreg free
  1524  000C7C                     
  1525                           ;LCD.c: 55:  TRISD = 0x00;
  1526  000C7C  0E00               	movlw	0
  1527  000C7E  6E95               	movwf	149,c	;volatile
  1528  000C80                     
  1529                           ;LCD.c: 56:         _delay(1200);
  1530  000C80  0EF0               	movlw	240
  1531  000C82                     u497:
  1532  000C82  D000               	nop2	
  1533  000C84  2EE8               	decfsz	wreg,f,c
  1534  000C86  D7FD               	bra	u497
  1535  000C88                     
  1536                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1537  000C88  928C               	bcf	140,1,c	;volatile
  1538  000C8A                     
  1539                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1540  000C8A  948C               	bcf	140,2,c	;volatile
  1541  000C8C                     
  1542                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1543  000C8C  808C               	bsf	140,0,c	;volatile
  1544  000C8E                     
  1545                           ;LCD.c: 61:  aux = dato & 0xF0;
  1546  000C8E  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1547  000C90  0BF0               	andlw	240
  1548  000C92  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1549  000C94                     
  1550                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1551  000C94  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1552  000C96  EC90  F006         	call	_ENVIA_NIBBLE
  1553  000C9A                     
  1554                           ;LCD.c: 63:  aux = dato << 4;
  1555  000C9A  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1556  000C9C  0BF0               	andlw	240
  1557  000C9E  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1558  000CA0                     
  1559                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1560  000CA0  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1561  000CA2  EC90  F006         	call	_ENVIA_NIBBLE
  1562  000CA6  0012               	return		;funcret
  1563  000CA8                     __end_of_ENVIA_CHAR:
  1564                           	callstack 0
  1565                           
  1566 ;; *************** function _LEER_LCD *****************
  1567 ;; Defined at:
  1568 ;;		line 121 in file "LCD.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  aux             1    0[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, status,2, status,0
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0
  1583 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1585 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1586 ;;Total ram usage:        1 bytes
  1587 ;; Hardware stack levels used: 1
  1588 ;; This function calls:
  1589 ;;		Nothing
  1590 ;; This function is called by:
  1591 ;;		_ENVIA_CHAR
  1592 ;;		_ENVIA_LCD_CMD
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text14
  1597  000A9C                     __ptext14:
  1598                           	callstack 0
  1599  000A9C                     _LEER_LCD:
  1600                           	callstack 28
  1601  000A9C                     
  1602                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1603  000A9C  0EF8               	movlw	248
  1604  000A9E  6E95               	movwf	149,c	;volatile
  1605  000AA0                     
  1606                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1607  000AA0  908C               	bcf	140,0,c	;volatile
  1608  000AA2                     
  1609                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1610  000AA2  828C               	bsf	140,1,c	;volatile
  1611  000AA4                     
  1612                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1613  000AA4  848C               	bsf	140,2,c	;volatile
  1614  000AA6                     
  1615                           ;LCD.c: 128:         _delay(1200);
  1616  000AA6  0EF0               	movlw	240
  1617  000AA8                     u507:
  1618  000AA8  D000               	nop2	
  1619  000AAA  2EE8               	decfsz	wreg,f,c
  1620  000AAC  D7FD               	bra	u507
  1621  000AAE                     
  1622                           ;LCD.c: 130:  aux = PORTD;
  1623  000AAE  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1624  000AB2                     
  1625                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1626  000AB2  948C               	bcf	140,2,c	;volatile
  1627  000AB4                     
  1628                           ;LCD.c: 132:         _delay(1200);
  1629  000AB4  0EF0               	movlw	240
  1630  000AB6                     u517:
  1631  000AB6  D000               	nop2	
  1632  000AB8  2EE8               	decfsz	wreg,f,c
  1633  000ABA  D7FD               	bra	u517
  1634  000ABC                     
  1635                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1636  000ABC  848C               	bsf	140,2,c	;volatile
  1637  000ABE                     
  1638                           ;LCD.c: 135:         _delay(1200);
  1639  000ABE  0EF0               	movlw	240
  1640  000AC0                     u527:
  1641  000AC0  D000               	nop2	
  1642  000AC2  2EE8               	decfsz	wreg,f,c
  1643  000AC4  D7FD               	bra	u527
  1644  000AC6                     
  1645                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1646  000AC6  948C               	bcf	140,2,c	;volatile
  1647  000AC8                     l835:
  1648                           
  1649                           ;LCD.c: 138:  aux = aux & 0x80;
  1650  000AC8  5001               	movf	LEER_LCD@aux^0,w,c
  1651  000ACA  0B80               	andlw	128
  1652  000ACC  6E01               	movwf	LEER_LCD@aux^0,c
  1653                           
  1654                           ;LCD.c: 139:  while(aux == 0x80)
  1655  000ACE  EF7D  F005         	goto	l849
  1656  000AD2                     l67:
  1657                           
  1658                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1659  000AD2  848C               	bsf	140,2,c	;volatile
  1660  000AD4                     
  1661                           ;LCD.c: 142:             _delay(1200);
  1662  000AD4  0EF0               	movlw	240
  1663  000AD6                     u537:
  1664  000AD6  D000               	nop2	
  1665  000AD8  2EE8               	decfsz	wreg,f,c
  1666  000ADA  D7FD               	bra	u537
  1667  000ADC                     
  1668                           ;LCD.c: 143:             aux = PORTD;
  1669  000ADC  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1670  000AE0                     
  1671                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1672  000AE0  948C               	bcf	140,2,c	;volatile
  1673                           
  1674                           ;LCD.c: 145:             _delay(1200);
  1675  000AE2  0EF0               	movlw	240
  1676  000AE4                     u547:
  1677  000AE4  D000               	nop2	
  1678  000AE6  2EE8               	decfsz	wreg,f,c
  1679  000AE8  D7FD               	bra	u547
  1680  000AEA                     
  1681                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1682  000AEA  848C               	bsf	140,2,c	;volatile
  1683                           
  1684                           ;LCD.c: 147:             _delay(1200);
  1685  000AEC  0EF0               	movlw	240
  1686  000AEE                     u557:
  1687  000AEE  D000               	nop2	
  1688  000AF0  2EE8               	decfsz	wreg,f,c
  1689  000AF2  D7FD               	bra	u557
  1690  000AF4                     
  1691                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1692  000AF4  948C               	bcf	140,2,c	;volatile
  1693  000AF6  EF64  F005         	goto	l835
  1694  000AFA                     l849:
  1695                           
  1696                           ;LCD.c: 139:  while(aux == 0x80)
  1697  000AFA  0E80               	movlw	128
  1698  000AFC  1801               	xorwf	LEER_LCD@aux^0,w,c
  1699  000AFE  B4D8               	btfsc	status,2,c
  1700  000B00  EF84  F005         	goto	u11
  1701  000B04  EF86  F005         	goto	u10
  1702  000B08                     u11:
  1703  000B08  EF69  F005         	goto	l67
  1704  000B0C                     u10:
  1705  000B0C  0012               	return		;funcret
  1706  000B0E                     __end_of_LEER_LCD:
  1707                           	callstack 0
  1708                           
  1709 ;; *************** function _ENVIA_NIBBLE *****************
  1710 ;; Defined at:
  1711 ;;		line 93 in file "LCD.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  dato            1    wreg     unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  dato            1    0[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1728 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_ENVIA_CHAR
  1735 ;;		_LCD_CONFIG
  1736 ;;		_ENVIA_LCD_CMD
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text15
  1741  000D20                     __ptext15:
  1742                           	callstack 0
  1743  000D20                     _ENVIA_NIBBLE:
  1744                           	callstack 28
  1745                           
  1746                           ;incstack = 0
  1747                           ;ENVIA_NIBBLE@dato stored from wreg
  1748  000D20  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1749  000D22                     
  1750                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1751  000D22  0E0F               	movlw	15
  1752  000D24  168C               	andwf	140,f,c	;volatile
  1753                           
  1754                           ;LCD.c: 96:  dato &= 0xF0;
  1755  000D26  0EF0               	movlw	240
  1756  000D28  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1757                           
  1758                           ;LCD.c: 97:  LATD|= dato;
  1759  000D2A  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1760  000D2C  128C               	iorwf	140,f,c	;volatile
  1761  000D2E                     
  1762                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1763  000D2E  848C               	bsf	140,2,c	;volatile
  1764  000D30                     
  1765                           ;LCD.c: 100:         _delay(1200);
  1766  000D30  0EF0               	movlw	240
  1767  000D32                     u567:
  1768  000D32  D000               	nop2	
  1769  000D34  2EE8               	decfsz	wreg,f,c
  1770  000D36  D7FD               	bra	u567
  1771  000D38                     
  1772                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1773  000D38  948C               	bcf	140,2,c	;volatile
  1774  000D3A  0012               	return		;funcret
  1775  000D3C                     __end_of_ENVIA_NIBBLE:
  1776                           	callstack 0
  1777                           
  1778                           	psect	rparam
  1779  0000                     
  1780                           	psect	idloc
  1781                           
  1782                           ;Config register IDLOC0 @ 0x200000
  1783                           ;	unspecified, using default values
  1784  200000                     	org	2097152
  1785  200000  FF                 	db	255
  1786                           
  1787                           ;Config register IDLOC1 @ 0x200001
  1788                           ;	unspecified, using default values
  1789  200001                     	org	2097153
  1790  200001  FF                 	db	255
  1791                           
  1792                           ;Config register IDLOC2 @ 0x200002
  1793                           ;	unspecified, using default values
  1794  200002                     	org	2097154
  1795  200002  FF                 	db	255
  1796                           
  1797                           ;Config register IDLOC3 @ 0x200003
  1798                           ;	unspecified, using default values
  1799  200003                     	org	2097155
  1800  200003  FF                 	db	255
  1801                           
  1802                           ;Config register IDLOC4 @ 0x200004
  1803                           ;	unspecified, using default values
  1804  200004                     	org	2097156
  1805  200004  FF                 	db	255
  1806                           
  1807                           ;Config register IDLOC5 @ 0x200005
  1808                           ;	unspecified, using default values
  1809  200005                     	org	2097157
  1810  200005  FF                 	db	255
  1811                           
  1812                           ;Config register IDLOC6 @ 0x200006
  1813                           ;	unspecified, using default values
  1814  200006                     	org	2097158
  1815  200006  FF                 	db	255
  1816                           
  1817                           ;Config register IDLOC7 @ 0x200007
  1818                           ;	unspecified, using default values
  1819  200007                     	org	2097159
  1820  200007  FF                 	db	255
  1821                           
  1822                           	psect	config
  1823                           
  1824                           ;Config register CONFIG1L @ 0x300000
  1825                           ;	PLL Selection
  1826                           ;	PLLSEL = PLL4X, 4x clock multiplier
  1827                           ;	PLL Enable Configuration bit
  1828                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  1829                           ;	CPU System Clock Postscaler
  1830                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  1831                           ;	Low Speed USB mode with 48 MHz system clock
  1832                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  1833  300000                     	org	3145728
  1834  300000  00                 	db	0
  1835                           
  1836                           ;Config register CONFIG1H @ 0x300001
  1837                           ;	Oscillator Selection
  1838                           ;	FOSC = INTOSCIO, Internal oscillator
  1839                           ;	Primary Oscillator Shutdown
  1840                           ;	PCLKEN = ON, Primary oscillator enabled
  1841                           ;	Fail-Safe Clock Monitor
  1842                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1843                           ;	Internal/External Oscillator Switchover
  1844                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1845  300001                     	org	3145729
  1846  300001  28                 	db	40
  1847                           
  1848                           ;Config register CONFIG2L @ 0x300002
  1849                           ;	Power-up Timer Enable
  1850                           ;	nPWRTEN = ON, Power up timer enabled
  1851                           ;	Brown-out Reset Enable
  1852                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  1853                           ;	Brown-out Reset Voltage
  1854                           ;	BORV = 190, BOR set to 1.9V nominal
  1855                           ;	Low-Power Brown-out Reset
  1856                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  1857  300002                     	org	3145730
  1858  300002  58                 	db	88
  1859                           
  1860                           ;Config register CONFIG2H @ 0x300003
  1861                           ;	Watchdog Timer Enable bits
  1862                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  1863                           ;	Watchdog Timer Postscaler
  1864                           ;	WDTPS = 32768, 1:32768
  1865  300003                     	org	3145731
  1866  300003  3C                 	db	60
  1867                           
  1868                           ; Padding undefined space
  1869  300004                     	org	3145732
  1870  300004  FF                 	db	255
  1871                           
  1872                           ;Config register CONFIG3H @ 0x300005
  1873                           ;	CCP2 MUX bit
  1874                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  1875                           ;	PORTB A/D Enable bit
  1876                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1877                           ;	Timer3 Clock Input MUX bit
  1878                           ;	T3CMX = RC0, T3CKI function is on RC0
  1879                           ;	SDO Output MUX bit
  1880                           ;	SDOMX = RB3, SDO function is on RB3
  1881                           ;	Master Clear Reset Pin Enable
  1882                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  1883  300005                     	org	3145733
  1884  300005  D1                 	db	209
  1885                           
  1886                           ;Config register CONFIG4L @ 0x300006
  1887                           ;	Stack Full/Underflow Reset
  1888                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1889                           ;	Single-Supply ICSP Enable bit
  1890                           ;	LVP = OFF, Single-Supply ICSP disabled
  1891                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  1892                           ;	ICPRT = OFF, ICPORT disabled
  1893                           ;	Extended Instruction Set Enable bit
  1894                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  1895                           ;	Background Debugger Enable bit
  1896                           ;	DEBUG = 0x1, unprogrammed default
  1897  300006                     	org	3145734
  1898  300006  81                 	db	129
  1899                           
  1900                           ; Padding undefined space
  1901  300007                     	org	3145735
  1902  300007  FF                 	db	255
  1903                           
  1904                           ;Config register CONFIG5L @ 0x300008
  1905                           ;	Block 0 Code Protect
  1906                           ;	CP0 = OFF, Block 0 is not code-protected
  1907                           ;	Block 1 Code Protect
  1908                           ;	CP1 = OFF, Block 1 is not code-protected
  1909                           ;	Block 2 Code Protect
  1910                           ;	CP2 = OFF, Block 2 is not code-protected
  1911                           ;	Block 3 Code Protect
  1912                           ;	CP3 = OFF, Block 3 is not code-protected
  1913  300008                     	org	3145736
  1914  300008  0F                 	db	15
  1915                           
  1916                           ;Config register CONFIG5H @ 0x300009
  1917                           ;	Boot Block Code Protect
  1918                           ;	CPB = OFF, Boot block is not code-protected
  1919                           ;	Data EEPROM Code Protect
  1920                           ;	CPD = OFF, Data EEPROM is not code-protected
  1921  300009                     	org	3145737
  1922  300009  C0                 	db	192
  1923                           
  1924                           ;Config register CONFIG6L @ 0x30000A
  1925                           ;	Block 0 Write Protect
  1926                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  1927                           ;	Block 1 Write Protect
  1928                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  1929                           ;	Block 2 Write Protect
  1930                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  1931                           ;	Block 3 Write Protect
  1932                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  1933  30000A                     	org	3145738
  1934  30000A  0F                 	db	15
  1935                           
  1936                           ;Config register CONFIG6H @ 0x30000B
  1937                           ;	Configuration Registers Write Protect
  1938                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1939                           ;	Boot Block Write Protect
  1940                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  1941                           ;	Data EEPROM Write Protect
  1942                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1943  30000B                     	org	3145739
  1944  30000B  E0                 	db	224
  1945                           
  1946                           ;Config register CONFIG7L @ 0x30000C
  1947                           ;	Block 0 Table Read Protect
  1948                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  1949                           ;	Block 1 Table Read Protect
  1950                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  1951                           ;	Block 2 Table Read Protect
  1952                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  1953                           ;	Block 3 Table Read Protect
  1954                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  1955  30000C                     	org	3145740
  1956  30000C  0F                 	db	15
  1957                           
  1958                           ;Config register CONFIG7H @ 0x30000D
  1959                           ;	Boot Block Table Read Protect
  1960                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  1961  30000D                     	org	3145741
  1962  30000D  40                 	db	64
  1963                           tosu	equ	0xFFF
  1964                           tosh	equ	0xFFE
  1965                           tosl	equ	0xFFD
  1966                           stkptr	equ	0xFFC
  1967                           pclatu	equ	0xFFB
  1968                           pclath	equ	0xFFA
  1969                           pcl	equ	0xFF9
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           indf0	equ	0xFEF
  1977                           postinc0	equ	0xFEE
  1978                           postdec0	equ	0xFED
  1979                           preinc0	equ	0xFEC
  1980                           plusw0	equ	0xFEB
  1981                           fsr0h	equ	0xFEA
  1982                           fsr0l	equ	0xFE9
  1983                           wreg	equ	0xFE8
  1984                           indf1	equ	0xFE7
  1985                           postinc1	equ	0xFE6
  1986                           postdec1	equ	0xFE5
  1987                           preinc1	equ	0xFE4
  1988                           plusw1	equ	0xFE3
  1989                           fsr1h	equ	0xFE2
  1990                           fsr1l	equ	0xFE1
  1991                           bsr	equ	0xFE0
  1992                           indf2	equ	0xFDF
  1993                           postinc2	equ	0xFDE
  1994                           postdec2	equ	0xFDD
  1995                           preinc2	equ	0xFDC
  1996                           plusw2	equ	0xFDB
  1997                           fsr2h	equ	0xFDA
  1998                           fsr2l	equ	0xFD9
  1999                           status	equ	0xFD8

Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      20
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[16]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___awdiv
    ___awdiv->___awmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_Init->_CURSOR_ONOFF
    _LCD_Init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3366
                                             15 COMRAM     2     2      0
                         _BORRAR_LCD
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                           _LCD_Init
                         _POS_CURSOR
                          _configuro
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            1     1      0    1270
                                             14 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     512
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     819
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _LCD_Init
     _BORRAR_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
   _configuro
   _convierte
     ___awdiv
       ___awmod (ARG)
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      14       1       21.1%
BITBIGSFRhhh        2C      0       0      20        0.0%
BITBIGSFRhhll       2A      0       0      23        0.0%
BITBIGSFRllh        27      0       0      27        0.0%
BITBIGSFRhhlhh       E      0       0      21        0.0%
BITBIGSFRlh          8      0       0      26        0.0%
BITBIGSFRlll         8      0       0      28        0.0%
BITBIGSFRhll         5      0       0      25        0.0%
BITBIGSFRhlh         2      0       0      24        0.0%
BITBIGSFRhhlhl       1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      14      29        0.0%
DATA                 0      0      14       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Feb 07 14:52:18 2023

                     l24 0C3E                       l42 0CD6                       l51 0CA6  
                     l60 0D3A                       l37 0D56                       l54 0D5E  
                     l63 0C72                       l48 0C04                       l57 0B6C  
                     l67 0AD2                       l69 0B0C                       u10 0B0C  
                     u11 0B08                       u20 0CBA                       u21 0CB6  
                     u30 0CD0                       u31 0CCC             ___awdiv@sign 000C  
          ENVIA_CHAR@aux 0003                      l120 0CFE                      l123 0BC6  
                    l132 08DA                      l117 0D1E                      l129 088C  
                    l371 09EA                      l384 0A9A                      l821 0AA6  
                    l813 0A9C                      l901 0C8A                      l831 0ABE  
                    l823 0AAE                      l815 0AA0                      l911 0CA0  
                    l903 0C8C                      l841 0AE0                      l833 0AC6  
                    l825 0AB2                      l817 0AA2                      l905 0C8E  
                    l913 0D58                      l921 0B26                      l851 0D22  
                    l843 0AEA                      l835 0AC8                      l827 0AB4  
                    l819 0AA4                      l907 0C94                      l931 0B54  
                    l923 0B3A                      l915 0B0E                      l853 0D2E  
                    l845 0AF4                      l837 0AD4                      l829 0ABC  
                    l909 0C9A                      l861 0C44                      l933 0B5A  
                    l925 0B42                      l917 0B12                      l855 0D30  
                    l839 0ADC                      l871 0C58                      l863 0C48  
                    l935 0B60                      l927 0B48                      l919 0B18  
                    l857 0D38                      l849 0AFA                      l873 0C5A  
                    l865 0C4C                      l881 0D50                      l937 0B66  
                    l929 0B4E                      l891 0C76                      l875 0C60  
                    l867 0C54                      l859 0C42                      l883 0CAA  
                    l893 0C78                      l877 0C66                      l869 0C56  
                    l885 0CBA                      l895 0C7C                      l879 0C6C  
                    l887 0CC0                      l897 0C80                      l889 0CD0  
                    l899 0C88                      u300 09B4                      u301 09B0  
                    u310 09DA                      u311 09D6                      u400 0C04  
                    u320 09FE                      u401 0C00                      u321 09FA  
                    u330 0A18                      u410 089A                      u331 0A14  
                    u411 0896                      u260 093A                      u340 0A32  
                    u420 08E8                      u261 0936                      u341 0A2E  
                    u421 08E4                      u270 0954                      u350 0A50  
                    u271 0950                      u351 0A4C                      u280 097A  
                    u360 0A66                      u281 0976                      u361 0A62  
                    u290 0998                      u370 0A8A                      u507 0AA8  
                    u291 0994                      u371 0A86                      u380 0C18  
                    u517 0AB6                      u381 0C14                      u437 0876  
                    u390 0C36                      u527 0AC0                      u447 0CE2  
                    u391 0C32                      u537 0AD6                      u457 0B1E  
                    u547 0AE4                      u467 0B2C                      u557 0AEE  
                    u477 0B3C                      u567 0D32                      u487 0C4E  
                    u497 0C82             ___awmod@sign 0006              LEER_LCD@aux 0001  
                    wreg 000FE8             ?_CURSOR_HOME 0001           ??_ENVIA_NIBBLE 0001  
         ENVIA_CHAR@dato 0002                     l1041 0D0A                     l1201 0A42  
                   l1051 0CDC                     l1043 0D0C                     l1035 0D00  
                   l1203 0A50                     l1211 0A7A                     l1053 0CEC  
                   l1221 0C18                     l1045 0D0E                     l1037 0D04  
                   l1141 092C                     l1213 0A8A                     l1205 0A66  
                   l1231 0BF0                     l1055 0CF0                     l1223 0C24  
                   l1047 0D10                     l1039 0D06                     l1151 095C  
                   l1143 093A                     l1215 0A92                     l1207 0A6E  
                   l1233 0BF2                     l1057 0CF4                     l1049 0CD8  
                   l1225 0C36                     l1161 098A                     l1153 0960  
                   l1145 0942                     l1209 0A74                     l1241 0838  
                   l1227 0BC8                     l1059 0CF8                     l1219 0C08  
                   l1171 09BE                     l1163 0998                     l1155 0968  
                   l1147 0946                     l1139 0928                     l1235 0B70  
                   l1251 0882                     l1243 0842                     l1229 0BD4  
                   l1173 09C4                     l1165 099E                     l1157 097A  
                   l1149 0954                     l1261 08BC                     l1253 0886  
                   l1245 0852                     l1237 0830                     l1167 09B4  
                   l1159 0982                     l1175 09CA                     l1191 0A0A  
                   l1183 09EC                     l1271 08E8                     l1263 08C4  
                   l1255 088A                     l1247 085C                     l1239 0834  
                   l1177 09DA                     l1169 09BC                     l1193 0A18  
                   l1185 09F0                     l1273 08F8                     l1265 08CC  
                   l1257 089A                     l1249 086C                     l1179 09E2  
                   l1195 0A20                     l1187 09FE                     l1275 0908  
                   l1267 08D4                     l1259 08AC                     l1197 0A32  
                   l1189 0A06                     l1277 0910                     l1269 08D8  
                   l1199 0A3A                     l1279 0918                     STR_1 0811  
                   STR_2 0801                     STR_3 081C                     STR_4 0825  
                   _LATD 000F8C                     _main 0830                     start 0000  
          ?_CURSOR_ONOFF 0001             ___param_bank 000000          ??_ENVIA_LCD_CMD 0002  
       __end_of_LEER_LCD 0B0E         __end_of_LCD_Init 0D00                    ?_main 0001  
        __end_of___awdiv 09EC          __end_of___awmod 0A9C          ___awdiv@divisor 0009  
        ___awdiv@counter 000B                    _PORTD 000F83                    _TRISD 000F95  
            ?_POS_CURSOR 0004                    tablat 000FF5                    status 000FD8  
         ??_CURSOR_ONOFF 0004          __initialization 0D3C             __end_of_main 0928  
        _ESCRIBE_MENSAJE 0BC8                   ??_main 0010            __activetblptr 000001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4         ___awdiv@dividend 0007                   _OSCCON 000FD3  
              ??___awdiv 000B                ??___awmod 0005     __end_of_ENVIA_NIBBLE 0D3C  
       ___awdiv@quotient 000D          ___awmod@divisor 0003                   isa$std 000001  
        ___awmod@counter 0005             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8             ??_BORRAR_LCD 0004  
              ?_LEER_LCD 0001               __accesstop 0060  __end_of__initialization 0D42  
              ?_LCD_Init 0001             ??_LCD_CONFIG 0004            ___rparam_used 000001  
           ??_ENVIA_CHAR 0002  __end_of_ESCRIBE_MENSAJE 0C06           __pcstackCOMRAM 0001  
     __end_of_BORRAR_LCD 0D60         ENVIA_LCD_CMD@aux 0003     __end_of_CURSOR_ONOFF 0CD8  
     __end_of_LCD_CONFIG 0B6E       __end_of_ENVIA_CHAR 0CA8               ??_LEER_LCD 0001  
       ENVIA_NIBBLE@dato 0001               ??_LCD_Init 0005             ??_POS_CURSOR 0005  
                __Hparam 0000                  __Lparam 0000         ?_ESCRIBE_MENSAJE 0004  
      __end_of_configuro 0D20                  ___awdiv 0928                  ___awmod 09EC  
           __psmallconst 0800    __end_of_ENVIA_LCD_CMD 0C74        __end_of_convierte 0BC8  
                _decenas 0013                  __pcinit 0D3C       __end_of_POS_CURSOR 0C40  
                __ramtop 0800                  __ptext0 0830                  __ptext1 0B6E  
                __ptext2 09EC                  __ptext3 0928                  __ptext4 0D00  
                __ptext5 0C06                  __ptext6 0CD8                  __ptext7 0B0E  
                __ptext8 0CA8                  __ptext9 0D50         ___awmod@dividend 0001  
           _ENVIA_NIBBLE 0D20     end_of_initialization 0D42                _TRISAbits 000F92  
           _CURSOR_ONOFF 0CA8       CURSOR_ONOFF@estado 0004            ??_CURSOR_HOME 0004  
    start_initialization 0D3C        ENVIA_LCD_CMD@dato 0002              __pbssCOMRAM 0012  
    __end_of_CURSOR_HOME 0D58                 ?___awdiv 0007                 ?___awmod 0001  
              _configuro 0D00              __smallconst 0800                _convierte 0B6E  
        convierte@numero 000F                 _LEER_LCD 0A9C                 _LCD_Init 0CD8  
               _LATDbits 000F8C         ESCRIBE_MENSAJE@i 0009           POS_CURSOR@fila 0005  
             ?_configuro 0001               _ADCON0bits 000FC2               ?_convierte 0001  
            _CURSOR_HOME 0D50                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800               _ANSELAbits 000F5B                 _centenas 0014  
               __ptext10 0D58                 __ptext11 0C40                 __ptext12 0BC8  
               __ptext13 0C74                 __ptext14 0A9C                 __ptext15 0D20  
             _BORRAR_LCD 0D58               _LCD_CONFIG 0B0E               _ENVIA_CHAR 0C74  
               isa$xinst 000000                 _unidades 0012            _ENVIA_LCD_CMD 0C40  
            ??_configuro 0001              ??_convierte 000F        ??_ESCRIBE_MENSAJE 0007  
  ESCRIBE_MENSAJE@cadena 0004           ?_ENVIA_LCD_CMD 0001              ?_BORRAR_LCD 0001  
          ?_ENVIA_NIBBLE 0001               _POS_CURSOR 0C06              ?_LCD_CONFIG 0001  
     ESCRIBE_MENSAJE@tam 0006              ?_ENVIA_CHAR 0001        POS_CURSOR@columna 0004  
